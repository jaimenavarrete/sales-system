@model List<SaleViewModel>
@{
    ViewBag.Title = "Ventas";
}

<div class="page-title">
    <h2><span class="glyphicon glyphicon-shopping-cart"></span> @ViewBag.Title</h2>
    <a href="@Url.Action("CreateSale", "Sales")" class="btn btn-success">
        <span class="glyphicon glyphicon-plus" aria-hidden="true"></span> Agregar venta
    </a>
</div>
<ol class="breadcrumb">
    <li>@Html.ActionLink("Inicio", "Index", "Home")</li>
    <li class="active">@ViewBag.Title</li>
</ol>

@{ Html.RenderPartial("_ResultMessage"); }

<div class="row">
    <div class="col-lg-4">
        <div class="panel panel-primary">
            <div class="panel-heading">
                <h3 class="panel-title">N° de ventas mensuales</h3>
            </div>
            <canvas id="MonthlySalesCounts"></canvas>
        </div>
    </div>

    <div class="col-lg-4">
        <div class="panel panel-primary">
            <div class="panel-heading">
                <h3 class="panel-title">Ingresos mensuales</h3>
            </div>
            <canvas id="MonthlySalesIncomes"></canvas>
        </div>
    </div>
</div>

<div class="panel panel-primary">
    <div class="panel-heading">
        <h3 class="panel-title">Ventas realizadas</h3>
    </div>
    <div class="table-responsive">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Nombres</th>
                    <th>Apellidos</th>
                    <th>Cantidad de productos</th>
                    <th>Total</th>
                    <th>Tipo de entrega</th>
                    <th>Estado de pago</th>
                    <th>Fecha de venta</th>
                    <th>Fecha de entrega</th>
                    <th>Estado de venta</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var sale in Model)
                {
                    <tr>
                        <td>@sale.Id</td>
                        <td>@sale.ClientFirstName</td>
                        <td>@sale.ClientLastName</td>
                        <td>@sale.SaleDetailsQuantity</td>
                        <td>$@sale.SaleDetailsTotal</td>
                        <td>@(sale.IsHomeDelivery ? "A domicilio" : "En local")</td>
                        <td>
                            <span class="label @(sale.IsPaymentCompleted ? "label-success" : "label-danger")">
                                @(sale.IsPaymentCompleted ? "Pagado" : "No pagado")
                            </span>
                        </td>
                        <td>@sale.SaleDate</td>
                        <td class="@(sale.DeliveryDate is null ? "text-bold" : "")">
                            @(sale.DeliveryDate is null ? "[Sin fecha]" : sale.DeliveryDate.ToString())
                        </td>
                        <td>
                            <span class="label @(sale.IsCompleted ? "label-success" : "label-default")">
                                @(sale.IsCompleted ? "Completado" : "Pendiente")
                            </span>
                        </td>
                        <td>
                            <div class="btn-group action-buttons" role="group" aria-label="Action buttons">
                                <a href="@Url.Action("CreateInvoice", "Sales", new { id = sale.Id })" target="_blank" class="btn btn-success">
                                    <span class="glyphicon glyphicon-save-file"></span>
                                </a>
                                <a href="@Url.Action("ViewSale", "Sales", new { id = sale.Id })" class="btn btn-primary">
                                    <span class="glyphicon glyphicon-eye-open"></span>
                                </a>
                                <a href="#" class="btn btn-warning">
                                    <span class="glyphicon glyphicon-pencil"></span>
                                </a>
                                <button form="DeleteSale-@(sale.Id)" class="btn btn-danger">
                                    <span class="glyphicon glyphicon-trash"></span>
                                </button>
                                @using (Html.BeginForm("DeleteSale", "Sales", FormMethod.Post,
                                    new { id = "DeleteSale-" + sale.Id, @class = "delete-sale-button" }))
                                {
                                    @Html.AntiForgeryToken()
                                    @Html.Hidden("Id", sale.Id)
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section scripts {
    @{ Html.RenderPartial("Partials/_DeleteSaleScripts"); }

    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.2.1/dist/chart.umd.min.js"></script>

    <script>
        getSalesDataPerMonth(function (data) {
            var labels = [];
            var pendingSalesCount = [];
            var completedSalesCount = [];
            var incomes = [];
            var debts = [];

            $.each(data, function (index, monthData) {
                labels.push(monthData.Year + " / " + getMonthName(monthData.Month));
                completedSalesCount.push(monthData.CompletedSalesCount);
                pendingSalesCount.push(monthData.PendingSalesCount);
                incomes.push(monthData.Income);
                debts.push(monthData.Debt);
            });

            createSaleCountsChart(labels, completedSalesCount, pendingSalesCount);
            createSaleIncomesChart(labels, incomes, debts);
        });

        function getSalesDataPerMonth(callback) {
            var url = "@Url.Action("GetSalesDataPerMonth", "Data")";

            $.ajax({
                url,
                type: 'GET',
                dataType: 'json',
                error: function (error) {
                    showErrorMessage("No se pudo obtener las ventas mensuales.")
                },
                success: callback
            })
        }

        function createSaleCountsChart(labels, completedSalesCount, pendingSalesCount) {
            const monthlySalesCountsCanvas = document.getElementById('MonthlySalesCounts');

            new Chart(monthlySalesCountsCanvas, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'N° de ventas completas',
                            data: completedSalesCount,
                            backgroundColor: 'rgba(57, 188, 157, 0.25)',
                            borderColor: '#39BC9D',
                            borderWidth: 3
                        },
                        {
                            label: 'N° de ventas pendientes',
                            data: pendingSalesCount,
                            backgroundColor: 'rgba(150, 165, 166, 0.25)',
                            borderColor: '#96A5A6',
                            borderWidth: 3
                        }
                    ]
                },
                options: {
                    scales: {
                        x: {
                            stacked: true
                        },
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        function createSaleIncomesChart(labels, incomes, debts) {
            const monthlySalesIncomesCanvas = document.getElementById('MonthlySalesIncomes');

            new Chart(monthlySalesIncomesCanvas, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Ingresos ($)',
                            data: incomes,
                            tension: 0.2,
                            fill: true,
                            backgroundColor: 'rgba(57, 188, 157, 0.25)',
                            borderWidth: 3,
                            borderColor: '#39BC9D',
                        },
                        {
                            label: 'Deudas ($)',
                            data: debts,
                            tension: 0.2,
                            fill: true,
                            backgroundColor: 'rgba(225, 73, 65, 0.25)',
                            borderWidth: 3,
                            borderColor: '#E14941',
                        }
                    ]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        function getMonthName(month) {
            var months = {
                1: 'Enero',
                2: 'Febrero',
                3: 'Marzo',
                4: 'Abril',
                5: 'Mayo',
                6: 'Junio',
                7: 'Julio',
                8: 'Agosto',
                9: 'Septiembre',
                10: 'Octubre',
                11: 'Noviembre',
                12: 'Diciembre'
            };

            return months[month] ?? 'Inválido';
        }
    </script>
}